install.packages('caret')
library(tidyverse)
library(lubridate)
library(caret)
?sample_frac
?dummyVars
install.packages("fastDummies
")
install.packages("fastDummies")
library(fastDummies)
?dummy_cols
?dummy_columns
?fill
?replace_na
?trainControl
?train
library(tidyverse)
library(lubridate)
library(caret)
library(fastDummies)
# Load the dataset
iris_dataset <- iris
View(iris_dataset)
# Load the dataset
iris_dataset <- tibble(iris)
# Select features (columns) and target columns
print(cols(iris))
# Select features (columns) and target columns
colnames(iris_dataset)
iris_dataset
library(tidyverse)
?datasets
iris_df <- tibble(iris)
?read_csv
view(iris_df)
iris_df
?summarise
?describe
??describe
?summary
summary(iris_df$Sepal.Length)
print(summary(iris_df))
summary(iris_df)
hist(iris_df$Sepal.Length)
hist(iris_df)
?hist
hist(iris_df$Sepal.Length)
hist(iris_df$Sepal.Length)
qqplot(iris_df$Sepal.Length)
hist(iris_df$Sepal.Length)
for (i in colnames(iris_df)) {
hist(iris_df$i)
}
for (i in colnames(iris_df)) {
hist(iris_df[i])
}
iris_df[:, "Sepal.Width"]
iris_df[, "Sepal.Width"]
for (i in colnames(iris_df)) {
hist(iris_df[, i])
}
for (i in colnames(iris_df[, :-1])) {
for (i in colnames(iris_df[, 1:2])) {
hist(iris_df[, i])
}
iris_df[, 1:2]
for (i in colnames(iris_df[, 1:-1])) {
hist(iris_df[, i])
}
for (i in colnames(iris_df[, -1])) {
hist(iris_df[, i])
}
iris_df[, -1]
iris_df[, -2]
iris_df[, 1]
iris_df[, 1:4]
for (i in colnames(iris_df[, 1:4])) {
hist(iris_df[, i])
}
iris_df[, 1]
for (i in range(1,4)) {
hist(iris_df[, i])
}
range(1,4)
?range
c(1:4)
for (i in c(1:4)) {
hist(iris_df[, i])
}
for (i in colnames(iris_df)) {
hist(iris_df[[i]])
}
?hist
for (i in colnames(iris_df %>% select(!Species))) {
hist(iris_df[[i]], title=paste("Histogram of ", i), xlab = i)
}
for (i in colnames(iris_df %>% select(!Species))) {
hist(iris_df[[i]], main=paste("Histogram of ", i), xlab = i)
}
is_null(iris_df)
?is_null
?is.null
?summary
map(iris_df, is.null())
map(iris_df, ~is.null())
map(iris_df, ~is.na(.))
map(iris_df, ~sum(is.na(.)))
?scale
iris_df <- iris_df %>%
mutate(sepal_length_scaled = scale(Sepal.Length),
sepal_width_scaled = scale(Sepal.Width),
petal_length_scaled = scale(Petal.Length),
petal_width_scaled = scale(Petal.Width))
iris_df
iris_df <- iris_df %>%
mutate(sepal_length_scaled = scale(Sepal.Length),
sepal_width_scaled = scale(Sepal.Width),
petal_length_scaled = scale(Petal.Length),
petal_width_scaled = scale(Petal.Width))
iris_df %>% select(6:)
iris_df <- iris_df %>%
mutate(sepal_length_scaled = scale(Sepal.Length),
sepal_width_scaled = scale(Sepal.Width),
petal_length_scaled = scale(Petal.Length),
petal_width_scaled = scale(Petal.Width))
iris_df
iris_df <- iris_df %>%
mutate(sepal_length_scaled = scale(Sepal.Length),
sepal_width_scaled = scale(Sepal.Width),
petal_length_scaled = scale(Petal.Length),
petal_width_scaled = scale(Petal.Width))
library(fastDummies)
?fastDummies
iris_df <- iris_df %>% dummy_cols(Species)
iris_df <- iris_df %>% dummy_cols(select_columns=Species)
iris_df <- iris_df %>% dummy_cols(select_columns="Species")
iris_df
iris_df
library(caret)
?trainControl
ctrl <- trainControl(method="cv", number=5)
set.seed(420) #random state to ensure reproducability
train <- slice_sample(iris_df, prop=0.80)
test  <- anti_join(iris_df, train)
?train
X_train <- train %>% select(sepal_length_scaled, sepal_width_scaled, petal_width_scaled, petal_length_scaled)
y_train <- train %>% select(Species_setosa)
View(X_train)
View(y_train)
log_model <- train(x=X_train, y=y_train, data=train, method="glm", trControl=ctrl, family="binomial")
y_train
numeric(y_train)
log_model <- train(x=X_train, y=train$Species_setosa, data=train, method="glm", trControl=ctrl, family="binomial")
log_model <- train(x=as.matrix(X_train), y=as.matrix(y_train), data=train, method="glm", trControl=ctrl, family="binomial")
log_model <- train(x=as.matrix(X_train), y=factor(y_train, labels = c("yes", "no")), data=train, method="glm", trControl=ctrl, family="binomial")
log_model <- train(x=as.matrix(X_train), y=as.matrix(y_train), data=train, method="glm", trControl=ctrl, family="binomial")
log_model <- train(x=as.matrix(X_train), y=as.matrix(y_train), data=train, metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
?trainControl
# log_model <- train(x=as.matrix(X_train), y=as.matrix(y_train), data=train, metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- glm(Species_setosa ~ sepal_length_scaled + sepal_width_scaled +
petal_width_scaled + petal_length_scaled, family="binomial")
# log_model <- train(x=as.matrix(X_train), y=as.matrix(y_train), data=train, metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- glm(Species_setosa ~ sepal_length_scaled + sepal_width_scaled +
petal_width_scaled + petal_length_scaled, data=training, family="binomial")
# log_model <- train(x=as.matrix(X_train), y=as.matrix(y_train), data=train, metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- glm(Species_setosa ~ sepal_length_scaled + sepal_width_scaled +
petal_width_scaled + petal_length_scaled, data=train, family="binomial")
trained_log_model <- train(log_model, metric="Accuracy")
View(log_model)
# log_model <- train(x=as.matrix(X_train), y=as.matrix(y_train), data=train, metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- glm(Species_setosa ~ sepal_length_scaled + sepal_width_scaled +
petal_width_scaled + petal_length_scaled, data=train, family="binomial")
trained_log_model <- train(log_model, metric="Accuracy", trControl=ctrl)
# log_model <- train(x=as.matrix(X_train), y=as.matrix(y_train), data=train, metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- glm(factor(Species_setosa) ~ sepal_length_scaled + sepal_width_scaled +
petal_width_scaled + petal_length_scaled, data=train, family="binomial")
trained_log_model <- train(log_model, metric="Accuracy", trControl=ctrl)
# log_model <- train(x=as.matrix(X_train), y=as.matrix(y_train), data=train, metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- glm(factor(Species_setosa) ~ sepal_length_scaled + sepal_width_scaled +
petal_width_scaled + petal_length_scaled, data=train, family="binomial")
summarise(log_model)
# log_model <- train(x=as.matrix(X_train), y=as.matrix(y_train), data=train, metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- glm(factor(Species_setosa) ~ sepal_length_scaled + sepal_width_scaled +
petal_width_scaled + petal_length_scaled, data=train, family="binomial")
predict(log_model)
# log_model <- train(x=as.matrix(X_train), y=as.matrix(y_train), data=train, metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- glm(factor(Species_setosa) ~ sepal_length_scaled + sepal_width_scaled +
petal_width_scaled + petal_length_scaled, data=train, family="binomial")
library(tidyverse)
iris_df <- tibble(iris)
iris_df
summary(iris_df)
for (i in colnames(iris_df %>% select(!Species))) {
hist(iris_df[[i]], main=paste("Histogram of ", i), xlab = i)
}
map(iris_df, ~sum(is.na(.)))
iris_df <- iris_df %>%
mutate(sepal_length_scaled = scale(Sepal.Length),
sepal_width_scaled = scale(Sepal.Width),
petal_length_scaled = scale(Petal.Length),
petal_width_scaled = scale(Petal.Width))
library(fastDummies)
iris_df <- iris_df %>% dummy_cols(select_columns="Species")
iris_df
set.seed(420) #random state to ensure reproducability
train <- slice_sample(iris_df, prop=0.80)
test  <- anti_join(iris_df, train)
library(caret)
ctrl <- trainControl(method="cv", number=10)
X_train <- train %>% select(sepal_length_scaled, sepal_width_scaled, petal_width_scaled, petal_length_scaled)
y_train <- train %>% select(Species_setosa)
# log_model <- train(x=as.matrix(X_train), y=as.matrix(y_train), data=train, metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
# log_model <- glm(factor(Species_setosa) ~ sepal_length_scaled + sepal_width_scaled +
#                    petal_width_scaled + petal_length_scaled, data=train, family="binomial")
log_model <- train(x=as.matrix(X_train), y=as.matrix(factor(y_train)), data=train, metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- train(x=as.matrix(X_train), y=factor(y_train), metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- train(x=as.matrix(X_train), y=as.matrix(factor(y_train)), metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- train(x=as.matrix(X_train), y=as.matrix(factor(y_train, c("yes", "no"))), metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
# log_model <- train(x=X_train, y=as.matrix(factor(y_train, c("yes", "no"))), metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- glm(factor(Species_setosa) ~ sepal_length_scaled + sepal_width_scaled + petal_width_scaled + petal_length_scaled, data=train, family="binomial")
?fastDummies
# log_model <- train(x=X_train, y=as.matrix(factor(y_train, c("yes", "no"))), metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- glm(factor(Species_setosa) ~ sepal_length_scaled + sepal_width_scaled + petal_width_scaled + petal_length_scaled, data=train, family="binomial")
# log_model <- train(x=X_train, y=as.matrix(factor(y_train, c("yes", "no"))), metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- glm(factor(Species_setosa) ~ sepal_length_scaled + sepal_width_scaled + petal_width_scaled + petal_length_scaled, data=train, family="binomial")
train(log_model)
# log_model <- train(x=X_train, y=as.matrix(factor(y_train, c("yes", "no"))), metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- glm(factor(Species_setosa) ~ sepal_length_scaled + sepal_width_scaled + petal_width_scaled + petal_length_scaled, data=train, family="binomial")
log_model
?train
y_train
y_train[,1]
y_train[['Species_setosa']]
X_train <- train %>% select(sepal_length_scaled, sepal_width_scaled, petal_width_scaled, petal_length_scaled)
y_train <- train[["Species_setosa"]]
log_model <- train(x=X_train, y=y_train, metric="Accuracy", method="glm", trControl=ctrl, family="binomial")
log_model <- train(x=X_train, y=y_train, trControl=ctrl)
# log_model <- glm(factor(Species_setosa) ~ sepal_length_scaled + sepal_width_scaled + petal_width_scaled + petal_length_scaled, data=train, family="binomial")
log_model
log_model <- train(x=X_train, y=factor(y_train), trControl=ctrl)
# log_model <- glm(factor(Species_setosa) ~ sepal_length_scaled + sepal_width_scaled + petal_width_scaled + petal_length_scaled, data=train, family="binomial")
log_model
?data_frame
log_model <- train(x=data.frame(X_train), y=factor(y_train), trControl=ctrl)
# log_model <- glm(factor(Species_setosa) ~ sepal_length_scaled + sepal_width_scaled + petal_width_scaled + petal_length_scaled, data=train, family="binomial")
log_model
log_model <- train(x=data.frame(X_train), y=factor(y_train), trControl=ctrl, method="lm")
log_model <- train(x=data.frame(X_train), y=factor(y_train), trControl=ctrl, method="glm")
# log_model <- glm(factor(Species_setosa) ~ sepal_length_scaled + sepal_width_scaled + petal_width_scaled + petal_length_scaled, data=train, family="binomial")
log_model
log_model <- train(x=data.frame(X_train), y=factor(y_train), trControl=ctrl, method="bayesglm")
# log_model <- glm(factor(Species_setosa) ~ sepal_length_scaled + sepal_width_scaled + petal_width_scaled + petal_length_scaled, data=train, family="binomial")
log_model
log_model <- train(x=data.frame(X_train), y=factor(y_train), trControl=ctrl, method="bayesglm")
# log_model <- glm(factor(Species_setosa) ~ sepal_length_scaled + sepal_width_scaled + petal_width_scaled + petal_length_scaled, data=train, family="binomial")
log_model <- train(x=data.frame(X_train), y=factor(y_train), trControl=ctrl, method="bayesglm")
print(log_model)
X_test <- test %>% select(sepal_length_scaled, sepal_width_scaled, petal_width_scaled, petal_length_scaled)
y_test <- test[['Species_setosa']]
y_pred <- predict(log_model, X_test)
?confusionMatrix
confusionMatrix(factor(y_pred),factor(y_test))
?confusionMatrix
View(test)
50/150
coef(log_model)
View(log_model)
coef(log_model$finalModel)
exp(coef(log_model$finalModel))
log_model
summary(log_model)
1-.83
log_model_2 <- train(x=data.frame(X_train %>% select(!sepal_length_scaled)), y=factor(y_train), trControl=ctrl, method="bayesglm")
log_model_2 <- train(x=data.frame(X_train %>% select(!sepal_length_scaled)), y=factor(y_train), trControl=ctrl, method="bayesglm")
summary(log_model_2)
log_model_3 <- train(x=data.frame(X_train %>% select(!sepal_length_scaled, !petal_width_scaled)), y=factor(y_train), trControl=ctrl, method="bayesglm")
summary(log_model_3)
log_model_3 <- train(x=data.frame(X_train %>% select(!c(sepal_length_scaled, petal_width_scaled))), y=factor(y_train), trControl=ctrl, method="bayesglm")
summary(log_model_3)
log_model_4 <- train(x=data.frame(X_train %>% select(petal_length_scaled)), y=factor(y_train), trControl=ctrl, method="bayesglm")
summary(log_model_4)
log_model_4
y_pred <- predict(log_model_4, X_test)
confusionMatrix(factor(y_pred),factor(y_test))
y_pred <- predict(log_model_4, X_test)
confusionMatrix(factor(y_pred),factor(y_test))
y_pred <- predict(log_model_4, (X_test %>% select(petal_length_scaled)))
confusionMatrix(factor(y_pred),factor(y_test))
ggplot(aes(x='species', y='petal_length')) + geom_area()
iris_df %>% ggplot(aes(x='species', y='petal_length_scaled')) + geom_area()
iris_df %>% ggplot(aes(x=species, y=petal_length_scaled)) + geom_area()
iris_df %>% ggplot(aes(x=Species, y=petal_length_scaled)) + geom_area()
iris_df %>% ggplot(aes(x=Species, y=petal_length_scaled)) + geom_scatter()
iris_df %>% ggplot(aes(x=Species, y=petal_length_scaled)) + geom_point()
iris_df %>% ggplot(aes(x=Species, y=petal_length_scaled)) + geom_violin()
iris_df %>% ggplot(aes(x=Species, y=petal_length_scaled, color=Species)) + geom_violin() + title(main="Petal Length by Iris Species", ylab="Petal Length Scaled") + theme_minimal()
iris_df %>% ggplot(aes(x=Species, y=petal_length_scaled, color=Species)) + geom_violin() + labels(main="Petal Length by Iris Species", ylab="Petal Length Scaled") + theme_minimal()
iris_df %>% ggplot(aes(x=Species, y=petal_length_scaled, color=Species)) + geom_violin() + labs(main="Petal Length by Iris Species", ylab="Petal Length Scaled") + theme_minimal()
iris_df %>% ggplot(aes(x=Species, y=petal_length_scaled, fill=Species)) + geom_violin() + labs(main="Petal Length by Iris Species", ylab="Petal Length Scaled") + theme_minimal()
iris_df %>% ggplot(aes(x=Species, y=petal_length_scaled, fill=Species)) + geom_violin() + labs(main="Petal Length by Iris Species", y="Petal Length Scaled") + theme_minimal()
